// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static int free;
  
    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let free = 2048;
        let ram[2048] = 16348 - 2048; // Size of free block (including size word)
        let ram[2049] = 0;            // Address of next free block (none)
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int nextFree, prevFree, address;
        let nextFree = free;
        let prevFree = 0;
        let address = 0;
        while (nextFree > 0) {
            if (ram[nextFree] > size) {
                let address = nextFree + 1;
                let size = size + 1; // Accomodate for size word
                // Store remaining size in remainder of this block
                let ram[nextFree + size] = ram[nextFree] - size;
                // Move pointer to next block into remainder of this block
                let ram[nextFree + size + 1] = ram[nextFree + 1];
                // Store new size
                let ram[nextFree] = size;
                // Adjust pointer in previous block to point to remainder of this block
                if (prevFree = 0) {
                    let free = nextFree + size;
                }
                else {
                    let ram[prevFree + 1] = nextFree + size;
                }
                let nextFree = 0;
            }
            else {
                let prevFree = nextFree;
                let nextFree = ram[nextFree + 1];
            }
        }
        return address;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = free;
        let free = o - 1;
        return;
    }    
}
